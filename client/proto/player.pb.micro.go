// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: client/proto/player.proto

package players

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Players service

func NewPlayersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Players service

type PlayersService interface {
	Get(ctx context.Context, in *PlayerRequest, opts ...client.CallOption) (*PlayerResponse, error)
}

type playersService struct {
	c    client.Client
	name string
}

func NewPlayersService(name string, c client.Client) PlayersService {
	return &playersService{
		c:    c,
		name: name,
	}
}

func (c *playersService) Get(ctx context.Context, in *PlayerRequest, opts ...client.CallOption) (*PlayerResponse, error) {
	req := c.c.NewRequest(c.name, "Players.Get", in)
	out := new(PlayerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Players service

type PlayersHandler interface {
	Get(context.Context, *PlayerRequest, *PlayerResponse) error
}

func RegisterPlayersHandler(s server.Server, hdlr PlayersHandler, opts ...server.HandlerOption) error {
	type players interface {
		Get(ctx context.Context, in *PlayerRequest, out *PlayerResponse) error
	}
	type Players struct {
		players
	}
	h := &playersHandler{hdlr}
	return s.Handle(s.NewHandler(&Players{h}, opts...))
}

type playersHandler struct {
	PlayersHandler
}

func (h *playersHandler) Get(ctx context.Context, in *PlayerRequest, out *PlayerResponse) error {
	return h.PlayersHandler.Get(ctx, in, out)
}
