// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/club-service.proto

package clubservice

import (
	_ "club-service/client/proto"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ClubService service

func NewClubServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ClubService service

type ClubService interface {
	Save(ctx context.Context, in *SaveRequest, opts ...client.CallOption) (*SaveResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	GetAll(ctx context.Context, in *ClubsRequest, opts ...client.CallOption) (*ClubsResponse, error)
}

type clubService struct {
	c    client.Client
	name string
}

func NewClubService(name string, c client.Client) ClubService {
	return &clubService{
		c:    c,
		name: name,
	}
}

func (c *clubService) Save(ctx context.Context, in *SaveRequest, opts ...client.CallOption) (*SaveResponse, error) {
	req := c.c.NewRequest(c.name, "ClubService.Save", in)
	out := new(SaveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) Get(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "ClubService.Get", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.name, "ClubService.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ClubService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubService) GetAll(ctx context.Context, in *ClubsRequest, opts ...client.CallOption) (*ClubsResponse, error) {
	req := c.c.NewRequest(c.name, "ClubService.GetAll", in)
	out := new(ClubsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClubService service

type ClubServiceHandler interface {
	Save(context.Context, *SaveRequest, *SaveResponse) error
	Get(context.Context, *GetRequest, *GetResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	GetAll(context.Context, *ClubsRequest, *ClubsResponse) error
}

func RegisterClubServiceHandler(s server.Server, hdlr ClubServiceHandler, opts ...server.HandlerOption) error {
	type clubService interface {
		Save(ctx context.Context, in *SaveRequest, out *SaveResponse) error
		Get(ctx context.Context, in *GetRequest, out *GetResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		GetAll(ctx context.Context, in *ClubsRequest, out *ClubsResponse) error
	}
	type ClubService struct {
		clubService
	}
	h := &clubServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ClubService{h}, opts...))
}

type clubServiceHandler struct {
	ClubServiceHandler
}

func (h *clubServiceHandler) Save(ctx context.Context, in *SaveRequest, out *SaveResponse) error {
	return h.ClubServiceHandler.Save(ctx, in, out)
}

func (h *clubServiceHandler) Get(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.ClubServiceHandler.Get(ctx, in, out)
}

func (h *clubServiceHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.ClubServiceHandler.Update(ctx, in, out)
}

func (h *clubServiceHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ClubServiceHandler.Delete(ctx, in, out)
}

func (h *clubServiceHandler) GetAll(ctx context.Context, in *ClubsRequest, out *ClubsResponse) error {
	return h.ClubServiceHandler.GetAll(ctx, in, out)
}
